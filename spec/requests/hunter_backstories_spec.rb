 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/hunter_backstories", type: :request do
  # HunterBackstory. As you add validations to HunterBackstory, be sure to
  # adjust the attributes here as well.
  let(:hunter) { create :hunter }
  let(:playbook) { create :playbook }
  let(:valid_attributes) {
    {
      hunter_id: hunter.id,
      playbook_id: playbook.id,
      choices: { "Doom": ["Doom flag"] }
    }
  }

  let(:invalid_attributes) {
    {
      hunter_id: hunter.id,
      playbook_id: playbook.id
    }
  }

  let(:hunter_backstory) { create :hunter_backstory, hunter: hunter, playbook: playbook }
  let(:user) { create :user, :admin }
  before do
    sign_in user
  end

  describe "GET /index" do
    subject(:get_index) { get hunter_backstories_url }
    let!(:hunter_backstory) { create(:hunter_backstory) }

    it "renders a successful response" do
      get_index
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    subject(:get_show) { get hunter_backstory_url(hunter_backstory) }

    it "renders a successful response" do
      get_show
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    let(:hunter) { create :hunter }

    it "renders a successful response" do
      get new_hunter_hunter_backstory_url(hunter_id: hunter.id)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      hunter_backstory
      get edit_hunter_backstory_url(hunter_backstory)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      subject do
        post hunter_hunter_backstories_url(hunter_id: hunter.id),
                params: { hunter_backstory: valid_attributes }
      end

      it "creates a new HunterBackstory" do
        expect { subject }.to change(HunterBackstory, :count).by(1)
      end

      it "redirects to the created hunter_backstory" do
        subject
        expect(response).to redirect_to(hunter_backstory_url(HunterBackstory.last))
      end
    end

    context "with invalid parameters" do
      subject do
        post hunter_hunter_backstories_url(hunter_id: hunter.id),
          params: { hunter_backstory: invalid_attributes }
      end

      it "does not create a new HunterBackstory" do
        expect { subject }.to change(HunterBackstory, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        subject
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    subject(:patch_update) { patch hunter_backstory_url(hunter_backstory), params: { hunter_backstory: attributes } }

    context "with valid parameters" do
      let(:playbook) { create :playbook }
      let(:attributes) { valid_attributes }
      let!(:hunter_backstory) { create(:hunter_backstory) }

      it "updates the requested hunter_backstory" do
        patch_update
        hunter_backstory.reload
        expect(hunter_backstory.playbook_id).to eq playbook.id
      end

      it "redirects to the hunter_backstory" do
        patch_update
        hunter_backstory.reload
        expect(response).to redirect_to(hunter_backstory_url(hunter_backstory))
      end
    end

    context "with invalid parameters" do
      let(:attributes) { invalid_attributes }

      it "renders a successful response (i.e. to display the 'edit' template)" do
        patch hunter_backstory_url(hunter_backstory), params: { hunter_backstory: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested hunter_backstory" do
      hunter_backstory = HunterBackstory.create! valid_attributes
      expect {
        delete hunter_backstory_url(hunter_backstory)
      }.to change(HunterBackstory, :count).by(-1)
    end

    it "redirects to the hunter_backstories list" do
      hunter_backstory = HunterBackstory.create! valid_attributes
      delete hunter_backstory_url(hunter_backstory)
      expect(response).to redirect_to(hunter_backstories_url)
    end
  end
end
